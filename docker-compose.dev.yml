version: "3"

services:
  strapiDB:
    container_name: strapiDB_dev
    platform: linux/amd64
    restart: unless-stopped
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=strapi
      - POSTGRES_PASSWORD=strapi
      - POSTGRES_DB=strapi
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - strapi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: strapi_dev
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    env_file: ./backend/.env
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/.cache
      - /app/build
      - strapi_logs:/app/logs # Добавляем том для логов
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      strapiDB:
        condition: service_healthy
    command: sh -c "npm run develop 2>&1 | tee /app/logs/strapi.log"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - strapi_logs:/strapi_logs:ro # Монтируем логи Strapi в режиме только для чтения
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://frontend:3000/api
      - NEXT_PUBLIC_STRAPI_URL=http://backend:1337
    networks:
      - strapi
    depends_on:
      backend:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
        apk add --no-cache grep &&
        echo 'Waiting for Strapi to start...' &&
        until grep -q 'Strapi started successfully' /strapi_logs/strapi.log 2>/dev/null; do
          echo 'Waiting for Strapi to initialize...'
          sleep 2
        done &&
        echo 'Strapi is fully started - starting Next.js' &&
        npm run dev
      "
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - strapi

volumes:
  strapi_logs: # Добавляем определение тома
  postgres_data_dev:

networks:
  strapi:
    name: strapi_dev
    driver: bridge
